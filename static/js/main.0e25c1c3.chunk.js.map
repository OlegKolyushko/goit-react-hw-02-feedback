{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","defaultProps","FeedbackOptions","options","onLeaveFeedback","map","option","index","type","name","key","onClick","Section","title","children","Notification","message","App","state","countTotalFeedback","e","countPositiveFeedbackPercentage","Math","round","handlerButton","event","target","setState","prevState","this","Object","keys","Component","ReactDom","render","document","querySelector"],"mappings":"2NAGA,SAASA,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC7C,OACA,oCACA,yCACI,mCAASJ,GACT,sCAAYC,GACZ,kCAAQC,GACR,oCAAUC,GACV,gDAAsBC,EAAtB,OAIRL,EAAWM,aAAe,CACtBL,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUTL,QCbAO,MAdf,YAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAChC,OACI,6BACKD,EAAQE,KAAI,SAACC,EAAOC,GAAR,OACT,4BAAQC,KAAK,SAASC,KAAMH,EAAQI,IAAKH,EAAOI,QAASP,GAAkBE,QCJ3F,SAASM,EAAT,GAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrB,OACI,oCACA,4BAAKD,GACJC,GAITF,EAAQX,aAAe,CACnBY,MAAO,YAKID,QCNAG,MARf,YAAkC,IAAXC,EAAU,EAAVA,QACnB,OACA,4BAAKA,ICCYC,E,4MACnBC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,mBAAqB,SAACC,GAAO,IAAD,EACK,EAAKF,MACrC,OAF2B,EAClBtB,KADkB,EACZC,QADY,EACHC,K,EASzBuB,gCAAkC,SAACD,GAAO,IAChCxB,EAAS,EAAKsB,MAAdtB,KAER,OAAkC,IAA9B,EAAKuB,qBACA,EAGFG,KAAKC,MAAO3B,EAAO,EAAKuB,qBAAwB,M,EAuBzDK,cAAgB,SAACC,GACf,IAAMhB,EAAOgB,EAAMC,OAAOjB,KAC1B,EAAKkB,UAAS,SAACC,GACb,OAAO,eACJnB,EAAOmB,EAAUnB,GAAO,O,uDAKrB,IAAD,EACwBoB,KAAKX,MAA5BtB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAGvB,OACE,oCACA,kBAAC,EAAD,CAASe,MAAM,yBACf,kBAAC,EAAD,CACAV,QAAS2B,OAAOC,KAAKF,KAAKX,OAC1Bd,gBAAiByB,KAAKL,gBAanBK,KAAKV,sBAAwB,EAAK,kBAAC,EAAD,CAAcH,QAAQ,sBAEzD,kBAAC,EAAD,CACApB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO8B,KAAKV,qBACZnB,mBAAoB6B,KAAKR,0C,GArFAW,aCAjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.0e25c1c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n    return ( \r\n    <>\r\n    <h2>Statistic</h2>\r\n        <p>Good:{good}</p>\r\n        <p>Neutral:{neutral}</p>\r\n        <p>Bad:{bad}</p>\r\n        <p>Total:{total}</p>\r\n        <p>Positive Feedback:{positivePercentage} %</p>\r\n    </>\r\n    )\r\n};\r\nStatistics.defaultProps = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0, \r\n    total: 0, \r\n    positivePercentage: 0\r\n}\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback}) {\r\n    return (\r\n        <div>\r\n            {options.map((option,index) => (\r\n                <button type='button' name={option} key={index} onClick={onLeaveFeedback}>{option}</button>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\nFeedbackOptions.propTypes = {\r\n    option: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({title, children}) {\r\n    return (\r\n        <>\r\n        <h2>{title}</h2>\r\n        {children}\r\n        </>\r\n    )\r\n}\r\nSection.defaultProps = {\r\n    title: 'Feedback',\r\n}\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification({message}) {\r\n    return (\r\n    <h1>{message}</h1>\r\n    )\r\n}\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}\r\nexport default Notification;","import React, { Component } from \"react\";\r\nimport Statistics from '../components/Statistics/Statistics';\r\nimport FeedbackOptions from '../components/FeedbackOptions/FeedbackOptions';\r\nimport Section from '../components/Section/Section';\r\nimport Notification from '../components/Notification/Notification';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  countTotalFeedback = (e) => {\r\n    const { good, neutral, bad } = this.state;\r\n   return good + neutral + bad; \r\n// console.log(`${good} + ${neutral} + ${bad}`);\r\n// const total = good + neutral + bad;\r\n// const total = Object.values(this.state).reduce((sum,b)=> sum + b , 0) ;\r\n// console.log(`${total}`);\r\n// return total;\r\n   \r\n  };\r\n  countPositiveFeedbackPercentage = (e) => {\r\n    const { good } = this.state;\r\n\r\n    if (this.countTotalFeedback() === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return Math.round((good / this.countTotalFeedback()) * 100);\r\n  };\r\n  // handlerGood = (e) => {\r\n  //   this.setState( prevState => {\r\n  //     return {\r\n  //       good: prevState.good + 1,\r\n  //     };\r\n  //   });\r\n  // };\r\n  // handlerNeutral = (e) => {\r\n  //   this.setState( prevState => {\r\n  //     return {\r\n  //       neutral: prevState.neutral + 1,\r\n  //     };\r\n  //   });\r\n  // };\r\n  // handlerBad = (e) => {\r\n  //   this.setState( prevState => {\r\n  //     return {\r\n  //       bad: prevState.bad + 1,\r\n  //     };\r\n  //   });\r\n  // };\r\n  handlerButton = (event) => {\r\n    const name = event.target.name;\r\n    this.setState((prevState)=>{\r\n      return {\r\n        [name]: prevState[name] +1,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    // const { total } = this.countTotalFeedback();\r\n    // const { positive } = this.countPositiveFeedbackPercentage();\r\n    return (\r\n      <>\r\n      <Section title=\"Please leave feedback\">\r\n      <FeedbackOptions\r\n      options={Object.keys(this.state)}\r\n      onLeaveFeedback={this.handlerButton}\r\n      ></FeedbackOptions>\r\n        {/* <h2>Please leave feedback</h2>\r\n        <button type=\"button\" onClick={this.handlerGood}>\r\n          Good\r\n        </button>\r\n        <button type=\"button\" onClick={this.handlerNeutral}>\r\n          Neutral\r\n        </button>\r\n        <button type=\"button\" onClick={this.handlerBad}>\r\n          Bad\r\n        </button> */}\r\n\r\n        {this.countTotalFeedback() <= 0 ? (<Notification message=\"No feedback given\"></Notification>) : (\r\n\r\n        <Statistics\r\n        good={good}\r\n        neutral={neutral}\r\n        bad={bad}\r\n        total={this.countTotalFeedback()}\r\n        positivePercentage={this.countPositiveFeedbackPercentage()}\r\n        ></Statistics>)\r\n        }\r\n\r\n        \r\n        </Section>\r\n        {/* <h2>Statistic</h2>\r\n        <p>Good:{good}</p>\r\n        <p>Neutral:{neutral}</p>\r\n        <p>Bad:{bad}</p>\r\n        <p>Total:{this.countTotalFeedback()}</p>\r\n        <p>Positive Feedback:{this.countPositiveFeedbackPercentage()} %</p> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './components/App'\r\n\r\n\r\n\r\nReactDom.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}